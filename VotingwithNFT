// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract Voting is ERC721 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    struct Vote {
        string description;
        uint256 deadline;
        uint256 yesVotes;
        uint256 noVotes;
        bool isActive;
    }
    address public admin;
    Vote[] public votes;
    mapping(address => uint256) public stakedTokens; 
    mapping(address => mapping(uint256 => bool)) public hasVoted;

    event VoteCreated(uint256 id, string description, uint256 deadline);
    event VoteEnded(uint256 id, uint256 yesVotes, uint256 noVotes);
    event NFTMinted(uint256 voteId, uint256 tokenId, string result);

    constructor() ERC721("VotingNFT", "VNFT") {
        admin = msg.sender;
    }

    function createVote(string memory _description, uint256 _duration) external {
        require(msg.sender == admin, "Only admin can create a vote");
        uint256 deadline = block.timestamp + _duration;
        votes.push(Vote({
            description: _description,
            deadline: deadline,
            yesVotes: 0,
            noVotes: 0,
            isActive: true
        }));
        emit VoteCreated(votes.length - 1, _description, deadline);
    }


    function stakeTokens(uint256 _amount) external {
        require(_amount > 0, "Amount must be greater than 0");
        stakedTokens[msg.sender] += _amount;
    }

    function vote(uint256 _voteId, bool _vote) external {
        require(_voteId < votes.length, "Invalid vote ID");
        require(votes[_voteId].isActive, "Vote is not active");
        require(block.timestamp <= votes[_voteId].deadline, "Deadline passed");
        require(!hasVoted[msg.sender][_voteId], "This wallet already voted");
        require(stakedTokens[msg.sender] > 0, "No staked tokens");

        if (_vote) {
            votes[_voteId].yesVotes += stakedTokens[msg.sender];
        } else {
            votes[_voteId].noVotes += stakedTokens[msg.sender];
        }
        hasVoted[msg.sender][_voteId] = true;
        if (block.timestamp >= votes[_voteId].deadline) {
            _endVote(_voteId);
        }
    }

    function _endVote(uint256 _voteId) internal {
        Vote storage currentVote = votes[_voteId];
        currentVote.isActive = false;
        string memory result = currentVote.yesVotes > currentVote.noVotes ? "Yes" : "No";
        _tokenIds.increment();
        uint256 newTokenId = _tokenIds.current();
        _mint(msg.sender, newTokenId);

        emit VoteEnded(_voteId, currentVote.yesVotes, currentVote.noVotes);
        emit NFTMinted(_voteId, newTokenId, result);
    }

    function getVoteResult(uint256 _voteId) external view returns (uint256 yesVotes, uint256 noVotes, bool isActive) {
        require(_voteId < votes.length, "Invalid vote ID");
        Vote memory currentVote = votes[_voteId];
        return (currentVote.yesVotes, currentVote.noVotes, currentVote.isActive);
    }
}
